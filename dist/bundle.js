var pixels;(()=>{"use strict";var t={d:(i,e)=>{for(var a in e)t.o(e,a)&&!t.o(i,a)&&Object.defineProperty(i,a,{enumerable:!0,get:e[a]})},o:(t,i)=>Object.prototype.hasOwnProperty.call(t,i),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},i={};t.r(i),t.d(i,{PixelGrid:()=>a,PixelGridManager:()=>s,addPixelGridToBody:()=>h});class e extends HTMLElement{constructor(){super(),this.width=this.getAttribute("width")||300,this.height=this.getAttribute("height")||150,this.pixelSize=this.getAttribute("pixel-size")||1,this.canvas=document.createElement("canvas"),this.canvas.width=this.width,this.canvas.height=this.height;const t="true"===this.getAttribute("will-read-frequently");this.ctx=this.canvas.getContext("2d",{willReadFrequently:t}),this.imageData=this.ctx.createImageData(this.width,this.height),this.appendChild(this.canvas)}connectedCallback(){this.initialize(),this.canvas.addEventListener("mousemove",(t=>this.showPixelInfo(t)))}initialize(){for(let t=0;t<this.imageData.data.length;t+=4)this.imageData.data[t]=200,this.imageData.data[t+1]=200,this.imageData.data[t+2]=200,this.imageData.data[t+3]=255;this.ctx.putImageData(this.imageData,0,0),this.drawGridOverlay()}redraw(){this.ctx.putImageData(this.imageData,0,0),this.drawGridOverlay()}resize(t,i){this.width=t,this.height=i,this.canvas.width=this.width,this.canvas.height=this.height,this.imageData=this.ctx.createImageData(this.width,this.height),this.redraw()}setData(t){this.imageData.data.set(t),this.ctx.putImageData(this.imageData,0,0)}drawGridOverlay(){for(let t=0;t<=this.width;t+=this.pixelSize)for(let i=0;i<=this.height;i+=this.pixelSize)this.ctx.strokeStyle="#ddd",this.ctx.strokeRect(t,i,this.pixelSize,this.pixelSize)}showPixelInfo(t){const i=this.canvas.getBoundingClientRect(),e=Math.floor((t.clientX-i.left)/this.pixelSize),a=Math.floor((t.clientY-i.top)/this.pixelSize),s=this.getPixel(e,a);console.log(`Pixel(${e}, ${a}): RGB(${s[0]}, ${s[1]}, ${s[2]})`)}getPixel(t,i){const e=4*(i*this.width+t);return[this.imageData.data[e],this.imageData.data[e+1],this.imageData.data[e+2],this.imageData.data[e+3]]}setPixel(t,i,[e,a,s,h]){const r=4*(i*this.width+t);this.imageData.data[r]=e,this.imageData.data[r+1]=a,this.imageData.data[r+2]=s,this.imageData.data[r+3]=h,this.ctx.putImageData(this.imageData,0,0)}updateImageData(){this.imageData=this.ctx.getImageData(0,0,this.width,this.height)}}customElements.define("pixel-grid",e);const a=e,s=class{constructor(t){this.pixelGrid=t,this.history=[],this.historyIndex=-1,this.lastImageData=null,this.lastImageSrc=null}captureScreen(){}saveCurrentImage(){this.history=this.history.slice(0,this.historyIndex+1);const t=this.pixelGrid.ctx.getImageData(0,0,this.pixelGrid.width,this.pixelGrid.height);this.history.push(t),this.historyIndex++,this.history.length>20&&(this.history.shift(),this.historyIndex--)}undo(){this.canUndo()&&(this.historyIndex--,this.pixelGrid.ctx.putImageData(this.history[this.historyIndex],0,0))}redo(){this.canRedo()&&(this.historyIndex++,this.pixelGrid.ctx.putImageData(this.history[this.historyIndex],0,0))}canUndo(){return this.historyIndex>0}canRedo(){return this.historyIndex<this.history.length-1}clearLastImageData(){this.lastImageData=null}applyFilter(t){for(let i=0;i<this.pixelGrid.height;i++)for(let e=0;e<this.pixelGrid.width;e++){const a=t(this.pixelGrid.getPixel(e,i));this.pixelGrid.setPixel(e,i,a)}}loadImage(t,i=null){if(null!==i&&"function"!=typeof i)throw new TypeError("Expected the callback to be a function or null.");const e=new Image;e.onload=()=>{this.drawImage(e,0,0,this.pixelGrid.width,this.pixelGrid.height),i&&i()},e.onerror=t=>{console.error("Failed to load the image:",t)},e.src=t,this.lastImageSrc=t}drawImage(t,i,e,a,s){this.pixelGrid.ctx.drawImage(t,i,e,a,s),this.pixelGrid.updateImageData(),this.lastImageData=this.pixelGrid.ctx.getImageData(0,0,this.pixelGrid.width,this.pixelGrid.height)}redrawFromLastImage(){this.lastImageData?this.pixelGrid.ctx.putImageData(this.lastImageData,0,0):this.lastImageSrc?this.loadImage(this.lastImageSrc):console.error("No image data or source to redraw from.")}resize(t,i){const e=this.pixelGrid.ctx.getImageData(0,0,this.pixelGrid.width,this.pixelGrid.height);if(this.pixelGrid.resize(t,i),this.lastImageSrc){const e=new Image;e.onload=()=>{this.pixelGrid.ctx.drawImage(e,0,0,t,i),this.pixelGrid.updateImageData()},e.onerror=t=>{console.error("Failed to load the image:",t)},e.src=this.lastImageSrc}else e?this.pixelGrid.ctx.putImageData(e,0,0):(console.log("No image data to resize keeping shade on."),this.pixelGrid.initialize())}};function h(){const t=new a;document.body.appendChild(t),new s(t),console.log("PixelGrid added to body.")}pixels=i})();